local druid = require("druid.druid")

function init(self)
	msg.post(".", "acquire_input_focus")


 	self.druid = druid.new(self)
	self.active = false
	self.start_button = self.druid:new_button("button", function() 
		if not self.active then
			msg.post("server", "start_server")
			gui.set_text(gui.get_node("button_label"), "Stop server")
		else
			msg.post("server", "stop_server")
			gui.set_text(gui.get_node("button_label"), "Start server")
		end
		self.active = not self.active
	end)
end

function final(self)
    self.druid:final()
end

function update(self, dt)
    self.druid:update(dt)
end

function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end

function on_message(self, message_id, message)
	if message_id == hash("log") then
		gui.set_text(gui.get_node("label"), message.data)

	elseif message_id == hash("analog") then
		local player = self.players[message.from]
		local position = gui.get_position(player)
		local speed = 10
		position.x = position.x + message.data.x * speed
		position.y = position.y + message.data.y * speed
		gui.set_position(player, position)

	elseif message_id == hash("remove_player") then
		local player = self.players[message.ip]
		gui.delete_node(player)
		self.players[message.ip] = nil

	elseif message_id == hash("create_player") then
		local prefab = gui.clone_tree(gui.get_node("player"))
		local player = prefab["player"]
		gui.set_position(player, vmath.vector3(320, 500, 0))
		gui.set_enabled(player, true)
		gui.set_text(prefab["player_ip"], message.ip)
		self.players[message.ip] = player
	end
end