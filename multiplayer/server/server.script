local game_state = require "multiplayer.game.game_state"

function init(self)
	msg.post('.', 'acquire_input_focus')
	msg.post("multiplayer", "register")
	msg.post("virtual_gamepad", "register")
end

local function create_player(self, ip, position)
	msg.post(self.game_scene, "create_player", { ip = ip, position = position })
end

local function remove_player(self, ip)
	if self.game_scene then
		msg.post(self.game_scene, "remove_player", { ip = ip, })
	end
end

local function move_player(self, ip, x, y)
	if x == nil then x = 0 end
	if y == nil then y = 0 end
	msg.post(self.game_scene, "move_player", {
		ip = ip,
		data = {
			x = x,
			y = y
		}
	})
end

local function start_server(self)
	self.game_state = game_state.create()
	self.game_scene = factory.create("factory#factory")

	msg.post("virtual_gamepad", "set_enabled", { enabled = true })
	msg.post(self.game_scene, "set_server")

	msg.post("multiplayer", "start_server")

	local frequency = 0.005
	self.broadcast_handle = timer.delay(frequency, true, function()
		-- print(json.encode(self.game_state.current_state()))
		msg.post("multiplayer", "send_message_to_client", {
			type = "UDP",
			data = json.encode({
				type = "state_update",
				state = self.game_state.current_state()
			})
		})
	end)

	create_player(self, "localhost")
end

local function handle_new_client(self, ip)
	create_player(self, ip)
	msg.post("multiplayer", "send_message_to_client", {
		ip = ip,
		data = json.encode({
			ip = ip,
			type = "initial_state",
			state = self.game_state.current_state()
		})
	})
end

local function handle_client_action(self, ip, data)
	local ok, parsed = pcall(json.decode, data)
	if not ok then return end

	if parsed.action == "movement" then
		move_player(self, ip, parsed.x, parsed.y)
	end
end

local function handle_client_disconnected(self, ip)
	remove_player(self, ip)
	msg.post("multiplayer", "send_message_to_client", {
		data = json.encode({
			ip = ip,
			type = "player_disconnected",
		})
	})
end

local function stop_server(self)
	msg.post("virtual_gamepad", "set_enabled", { enabled = false })
	msg.post("multiplayer", "stop_server")
	if self.game_scene then
		go.delete(self.game_scene, true)
	end
	if self.broadcast_handle then
		timer.cancel(self.broadcast_handle)
	end
end

function on_message(self, message_id, message)
	----- Start server
	if message_id == hash("start_server") then
		start_server(self)

		-- Create player(new client)
	elseif message_id == hash("client_connected") then
		handle_new_client(self, message.ip)

		-- Client actions
	elseif message_id == hash("client_action") then
		handle_client_action(self, message.ip, message.data)

		-- Remove player(client disconnected)
	elseif message_id == hash("client_disconnected") then
		handle_client_disconnected(self, message.ip)

		-- Stop server
	elseif message_id == hash("stop_server") then
		stop_server(self)

		-- Control message from virtual_gamepad
	elseif message_id == hash("analog") then
		move_player(self, "localhost", message.x, message.y)
	end
end
