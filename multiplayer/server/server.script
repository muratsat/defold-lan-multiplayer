local game_state = require "multiplayer.game.game_state"

function init(self)
	msg.post('.', 'acquire_input_focus')
	msg.post("multiplayer", "register")
	msg.post("virtual_gamepad", "register")
end

local function start_state_broadcast(self)
	local broadcast_frequency = 0.02
	self.broadcast_handle = timer.delay(broadcast_frequency, true, function()
		-- msg.post("multiplayer", "send_message_to_client", {
		-- 	type = "UDP",
		-- 	data = json.encode({
		-- 		type = "state_update",
		-- 		data = self.game_state.current_state()
		-- 	})
		-- })
	end)
end

local function stop_state_broadcast(self)
	timer.cancel(self.broadcast_handle)
	self.broadcast_handle = nil
end

function on_message(self, message_id, message)
	if message_id == hash("start_server") then
		msg.post("multiplayer", "start_server")
		self.game_scene = factory.create("factory#factory")
		msg.post("virtual_gamepad", "set_enabled", { enabled = true })
		msg.post(self.game_scene, "set_server")
		msg.post(self.game_scene, "create_player", { ip = "localhost" })
		self.game_state = game_state.create()
		start_state_broadcast(self)
	elseif message_id == hash("analog") then
		msg.post(self.game_scene, "move_player", { player = "localhost", data = message })
	elseif message_id == hash("stop_server") then
		msg.post("multiplayer", "stop_server")
		stop_state_broadcast(self)
	elseif message_id == hash("client_connected") then
		msg.post(self.game_scene, "create_player", { ip = message.ip })
		-- msg.post("multiplayer", "send_message_to_client", { ip = message.ip, data = "welcome" })
		msg.post("multiplayer", "send_message_to_client", {
			ip = message.ip,
			data = json.encode({
				type = "initial_state",
				state = self.game_state.current_state()
			})
		})
	elseif message_id == hash("client_action") then
		local ok, data = pcall(json.decode, message.data)
		print(ok, data.x, data.y)
		if ok and data.x ~= nil and data.y ~= nil then
			msg.post(self.game_scene, "move_player", { player = message.ip, data = data })
		end
	elseif message_id == hash("client_disconnected") then
	elseif message_id == hash("log") then
		-- msg.post("gui", "log", { data = message.data })
		self.log = message.data
	end
end
