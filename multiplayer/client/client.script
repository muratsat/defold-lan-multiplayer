function init(self)
	msg.post('.', 'acquire_input_focus')

	msg.post("multiplayer", "register")
	msg.post("virtual_gamepad", "register")

end

local function connect(self, ip)
	print("connecting to", ip)
	msg.post("multiplayer", "stop_discovery")
	msg.post("multiplayer", "connect", { ip = ip })
	msg.post("virtual_gamepad", "set_enabled", { enabled = true })
	self.game_scene = factory.create("factory#factory")
end

local function remove_player(self, ip)
	if self.game_scene and ip then
		msg.post(self.game_scene, "remove_player", { ip = ip, })
	end
end

local function process_incoming_data(self, packet_string)
	local ok, parsed = pcall(json.decode, packet_string)
	if not ok then return end

	if parsed.type == "initial_state" then
		msg.post(self.game_scene, "set_state", {state = parsed.state})
		self.ip = parsed.ip
		--
	-- elseif parsed.type == "state_update" then
	-- 	msg.post(self.game_scene, "set_state", {state = parsed.state})
		-- 
	elseif parsed.type == "player_disconnected" then
		print("Player disconnected:", parsed.ip)
		remove_player(self, parsed.ip)
	end

end

local function send_movement_to_server(self, x, y)
	local use_tcp = x == 0 and y == 0
	local socket_type = use_tcp and "TCP" or "UDP"
	msg.post("multiplayer", "send_message_to_server", {
		type = socket_type,
		data = json.encode({
			action = "movement",
			x = x,
			y = y
		})
	})
end

local function handle_disconnected(self)
	msg.post("virtual_gamepad", "set_enabled", { enabled = false })
	if self.game_scene then
		go.delete(self.game_scene, true)
	end
end

function on_message(self, message_id, message)
	if message_id == hash("find_servers") then
		msg.post("multiplayer", "find_servers")

		-- updated list of available servers
	elseif message_id == hash("ip_discovery") then
		msg.post("gui", "ip_discovery", message)

		-- connect to chosen server
	elseif message_id == hash("connect") then
		connect(self, message.ip)

		-- received data from server
	elseif message_id == hash("received_from_server") then
		process_incoming_data(self, message.data)

		-- disconnected from server
	elseif message_id == hash("client_disconnected") then
		handle_disconnected(self)

		-- local virtual gamepad
	elseif message_id == hash("analog") then
		send_movement_to_server(self, message.x, message.y)
	end
end
