local sender_address = nil

local function post_to_sender(message_id, message_table)
	if sender_address then
		msg.post(sender_address, message_id, message_table)
	end
end
local function log(message_string)
	post_to_sender("log", { data = message_string })
	print("[MULTIPLAYER]", message_string)
end


local udp = require "defnet.udp"
local tcp_server = require "defnet.tcp_server"
local tcp_client = require "defnet.tcp_client"
local p2p_discovery = require "defnet.p2p_discovery"
local UDP_PORT = 9379
local TCP_PORT = 9673
local DISCOVERY_PORT = 50000

local function create_server(self)
	self.last_client_packet = {}

	self.udp_server = udp.create(function(data, peer_ip, peer_port)
		local ok, parsed = pcall(json.decode, data)
		if not ok then return end
		ok = parsed.data ~= nil and parsed.timestamp ~= nil and parsed.from == "client"
		if not ok then return end

		if self.last_client_packet[peer_ip] == nil then
			self.last_client_packet[peer_ip] = parsed.timestamp
			log("UDP server received data: " .. parsed.data .. " from " .. peer_ip .. ":" .. peer_port)
			post_to_sender("client_action", { ip = peer_ip, data = parsed.data })
		end
		if parsed.timestamp > self.last_client_packet[peer_ip] then
			self.last_client_packet[peer_ip] = parsed.timestamp
			log("UDP server received data: " .. parsed.data .. " from " .. peer_ip .. ":" .. peer_port)
			post_to_sender("client_action", { ip = peer_ip, data = parsed.data })
		end
	end, UDP_PORT)

	self.tcp_server = tcp_server.create(TCP_PORT,
		function(data, ip, port, client)
			log("TCP server recieved data: " .. data .. " from " .. ip)
			post_to_sender("client_action", { ip = ip, data = data })
		end,
		function(ip, port, client)
			self.clients[ip] = client
			log("TCP client connected: " .. ip)
			post_to_sender("client_connected", { ip = ip })
		end,
		function(ip, port, client)
			if ip then
				post_to_sender("client_disconnected", { ip = ip })
				self.clients[ip] = nil
			end
		end
	)
	self.tcp_server.start()

	self.p2p.broadcast("findme")
end

local function broadcast_udp(self, packet_string)
	if not self.udp_server then return end
	local json_data = json.encode({
		from = "server",
		timestamp = os.clock(),
		data = packet_string
	})

	for ip, _ in pairs(self.clients) do
		self.udp_server.send(json_data, ip, UDP_PORT)
	end
end

local function broadcast_tcp(self, packet_string, receiver_ip)
	if not self.tcp_server then return end
	packet_string = string.gsub(packet_string .. "\n", "\n\n", "\n")
	if receiver_ip then
		print("sending direct message:", packet_string, "to", receiver_ip)
		self.tcp_server.send(packet_string, self.clients[receiver_ip])
	else
		print("sending to all :", packet_string)
		self.tcp_server.broadcast(packet_string)
	end
end

local function connect_to_tcp_server(self, ip)
	local client, err = tcp_client.create(ip, TCP_PORT,
		function(data)
			log("TCP client received data: " .. data)
			post_to_sender("received_from_server", { data = data })
		end,
		function()
			post_to_sender("client_disconnected")
		end
	)
	if client then
		self.tcp_client = client
	end
end

local function connect_to_udp_server(self, ip)
	self.last_udp_timestamp = 0
	self.udp_client = udp.create(function(data, peer_ip, peer_port)
		if peer_ip ~= ip then return end
		local ok, parsed = pcall(json.decode, data)
		if not ok then return end
		ok = parsed.timestamp ~= nil and parsed.data ~= nil
		if not ok then return end

		if parsed.timestamp > self.last_udp_timestamp then
			-- log("UDP client received data: '" .. parsed.data .. "' at " .. parsed.timestamp)
			post_to_sender("received_from_server", { data = parsed.data })
			self.last_udp_timestamp = parsed.timestamp
		end
	end, UDP_PORT, ip, UDP_PORT)
end

local function create_client(self, ip)
	self.p2p.stop()
	self.listening = false
	self.server_ip = ip

	connect_to_udp_server(self, ip)
	connect_to_tcp_server(self, ip)
end

local function send_udp_to_server(self, packet_string)
	if self.last_sent_time == nil then
		self.last_sent_time = os.clock()
	end

	local max_diff = 0.04
	local diff = os.clock() - self.last_sent_time

	if diff >= max_diff then
		self.last_sent_time = os.clock()
		local json_data = json.encode({
			from = "client",
			timestamp = self.last_sent_time,
			data = packet_string
		})
		self.udp_client.send(json_data)
	end
end

local function send_tcp_to_server(self, packet_string)
	packet_string = string.gsub(packet_string .. "\n", "\n\n", "\n")
	self.tcp_client.send(packet_string)
end

local function get_server_list(self)
	local server_list = {}
	for ip, _ in pairs(self.available_servers) do
		table.insert(server_list, ip)
	end
	return server_list
end

local function find_servers(self)
	self.listening = true
	self.p2p.listen("findme", function(ip, port)
		local is_new = self.available_servers[ip] == nil
		self.available_servers[ip] = os.time()
		if is_new then
			post_to_sender("ip_discovery", { servers = get_server_list(self) })
		end
	end)
end

function init(self)
	self.clients = {}
	self.available_servers = {}
	self.p2p = p2p_discovery.create(DISCOVERY_PORT)
end

local function stop(self)
	self.p2p.stop()
	if self.udp_server then
		self.udp_server.destroy()
		self.udp_server = nil
	end
	if self.tcp_server then
		self.tcp_server.stop()
		self.tcp_server = nil
	end
	if self.udp_client then
		self.udp_client.destroy()
		self.udp_client = nil
	end
	if self.tcp_client then
		self.tcp_client.destroy()
		self.tcp_client = nil
	end
end

function final(self)
	stop(self)
end

local function update_discovery(self)
	self.p2p.update()
	if not self.listening then
		return
	end
	local changed = false
	local max_seconds = 2

	for ip, updated_at in pairs(self.available_servers) do
		if os.time() - updated_at >= max_seconds then
			self.available_servers[ip] = nil
			changed = true
		end
	end

	if changed then
		post_to_sender("ip_discovery", { servers = get_server_list(self) })
	end
end

function update(self, dt)
	update_discovery(self)
	if self.udp_server then
		self.udp_server.update()
	end
	if self.udp_client then
		self.udp_client.update()
	end
	if self.tcp_server then
		self.tcp_server.update()
	end
	if self.tcp_client then
		self.tcp_client.update()
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("register") then
		sender_address = sender
		---Server
	elseif message_id == hash("start_server") then
		create_server(self)
	elseif message_id == hash("send_message_to_client") then
		if message.type == "UDP" then
			broadcast_udp(self, message.data)
		else
			broadcast_tcp(self, message.data, message.ip)
		end
		-- Client
	elseif message_id == hash("find_servers") then
		find_servers(self)
	elseif message_id == hash("connect") then
		create_client(self, message.ip)
	elseif message_id == hash("send_message_to_server") then
		if message.type == "UDP" then
			send_udp_to_server(self, message.data)
		else
			send_tcp_to_server(self, message.data)
		end
		-- stop
	elseif message_id == hash("stop_server") or message_id == hash("stop_client") then
		stop(self)
	end
end
