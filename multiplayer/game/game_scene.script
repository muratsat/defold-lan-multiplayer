local game_state = require "multiplayer.game.game_state"

local function create_player(self, ip, position)
	print("create player", ip, "with position", position)
	local default_position = vmath.vector3(568, 320, 0)
	if position == nil then
		position = default_position
	end
	self.players[ip] = {
			x = position.x,
			y = position.y,
			z = position.y
	}
	local node_id = factory.create("#player_factory", position)
	self.player_node[ip] = node_id
	self.game_state.set_state(self.players)
end

function init(self)
	print("init game scene")
	self.game_state = game_state.create()
	self.players = {}
	self.player_node = {}
end

function update(self, dt)
	if self.is_server then
		for ip, _ in pairs(self.players) do
			local position =  go.get_position(self.player_node[ip])
			self.players[ip] = {
				x = position.x,
				y = position.y,
				z = position.z
			}
		end
		self.game_state.set_state(self.players)
		return
	end

	for ip, p in pairs(self.game_state.current_state()) do
		local position = vmath.vector3(p.x, p.y, p.z)
		if self.player_node[ip] == nil then
			create_player(self, ip, position)
		else
			msg.post(self.player_node[ip], "set_position", {data = position})
		end
	end
end

function final(self)
	for ip, node in pairs(self.player_node) do
		go.delete(node)
	end
end

function on_message(self, message_id, message)
	if message_id == hash("create_player") then
		create_player(self, message.ip, message.position)

	elseif message_id == hash("remove_player") then
		print("remove player", message.ip)
		if self.player_node[message.ip] then
			go.delete(self.player_node[message.ip])
		end
		self.players[message.ip] = nil
		self.player_node[message.ip] = nil

	elseif message_id == hash("move_player") then
		local player = self.players[message.ip]
		local node_id = self.player_node[message.ip]
		if player and node_id and message.data.x and message.data.y then
			msg.post(node_id, "move", message.data)
		end

	elseif message_id == hash("set_server") then
		self.is_server = true
	end
end
