local game_state = require "multiplayer.game.game_state"

local function create_player(self, ip, position)
	print("Creating player", ip, position)
	local default_position = vmath.vector3(568, 320, 0)
	if position == nil then
		position = default_position
	end
	self.players[ip] = {
		x = position.x,
		y = position.y,
		z = position.z,
	}

	local node_id = factory.create("#player_factory", position)
	self.player_node[ip] = node_id
end

function init(self)
	print("init game scene")
	self.game_state = game_state.create()
	self.players = {}
	self.player_node = {}
end

function update(self, dt)
	for ip, _ in pairs(self.game_state.to_remove()) do
		print("removing player", ip)
		if self.player_node[ip] then
			go.delete(self.player_node[ip])
			self.player_node[ip] = nil
			self.game_state.check_as_removed(ip)
		end
	end

	for ip, p in pairs(self.game_state.current_state()) do
		-- print(ip, cjson.encode(p))
		if self.player_node[ip] == nil then
			create_player(self, ip, vmath.vector3(p.position.x, p.position.y, p.position.z))
		end

		if self.is_server then
			msg.post(self.player_node[ip], "move", { velocity = p.velocity })
			local node_position = go.get_position(self.player_node[ip])
			self.game_state.set_position(ip, node_position)
		else
			msg.post(self.player_node[ip], "set_position", { position = p.position })
		end
	end
end

function final(self)
	for ip, node in pairs(self.player_node) do
		go.delete(node)
	end
end

function on_message(self, message_id, message)
	if message_id == hash("set_server") then
		self.is_server = true
	end
end
